<!--
@component
The {{ componentName }} component needs to be placed either inside a svelte-konva Layer or Group component. 

### Usage:
```tsx
{{{ example }}}
```

### Static config:
By default svelte-konva will automatically update your config prop on `dragend` and `transformend` events to match the config state (position, rotation, scale, ...) with the internal Konva state. 
If you additionally bind the config prop your reactive blocks will also be triggered once this happens. 
There might be cases where this behavior is not beneficial in this case you can disable it by passing the `staticConfig = true` prop to the component.

Further information: [Konva API docs](https://konvajs.org/api/Konva.{{ componentName }}.html), [svelte-konva docs](https://konvajs.org/docs/svelte)
-->
<script lang="ts">
	/**
	 * WARNING: This component is autogenerated using the svelteKonvaComponent.hbs template. Do not edit this file manually!
	 */

	import Konva from 'konva';
	import { onMount, onDestroy, createEventDispatcher } from 'svelte';
	import type { Writable } from 'svelte/store';
	import { registerEvents, type KonvaEvents } from '$lib/util/events';
	import { getParentContainer, type KonvaParent } from '$lib/util/manageContext';
	import { copyExistingKeys } from '$lib/util/object';

	interface $$Events extends KonvaEvents {}

	type Props = {
		config: Konva.{{ componentName }}Config;
		readonly handle?: Konva.{{ componentName }};
		staticConfig?: boolean;
	};

	let { config, handle = new Konva.{{ componentName }}(config), staticConfig = false } = $props<Props>();

	const parent: Writable<null | KonvaParent> = getParentContainer();
	const dispatcher = createEventDispatcher();

	$effect(() => {
		handle.setAttrs(config);
	});

	onMount(() => {
		$parent!.add(handle);

		if (!staticConfig) {
			handle.on('transformend', () => {
				copyExistingKeys(config, handle.getAttrs());
				config = config;
			});

			handle.on('dragend', () => {
				copyExistingKeys(config, handle.getAttrs());
				config = config;
			});
		}

		registerEvents(dispatcher, handle);
	});

	onDestroy(() => {
		handle.destroy();
	});
</script>
